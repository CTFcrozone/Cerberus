[package]
name = "cerberus-tui"
version = "0.1.0"
edition = "2021"

license.workspace = true

[dependencies]
cerberus-common = { path = "../cerberus-common", features = ["user"] }
derive_more = { version = "2.0.0", features = [
    "from",
    "display",
    "debug",
    "into",
    "deref",
] }
anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
libc = { workspace = true }
flume = { workspace = true }
zerocopy = { workspace = true }
zerocopy-derive = { workspace = true }
tracing = { workspace = true }
futures-timer = "3.0.3"
futures = "0.3.31"
ratatui = { version = "0.29.0", features = ["scrolling-regions"] }
sysinfo = "0.36.0"
crossterm = { version = "0.28", features = ["event-stream"] }
color-eyre = "0.6.3"
dns-lookup = { workspace = true }
tracing-subscriber = { workspace = true }
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "sync",
    "rt-multi-thread",
    "net",
    "signal",
] }
[build-dependencies]
derive_more = { version = "2.0.0", features = [
    "from",
    "display",
    "debug",
    "into",
    "deref",
] }

anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
cerberus-ebpf = { path = "../cerberus-ebpf" }

[[bin]]
name = "cerberus-tui"

path = "src/main.rs"
